require 'saml_idp/name_id_formatter'
require 'saml_idp/attribute_decorator'

module SamlIdp
  class MetadataBuilder

    def initialize(configurator = SamlIdp.config)
      @configurator = configurator
# TODO(awong): reference_id should be autogenerated maybe?
      @reference_id = 'b0e454a0-2ffb-0132-36d4-6c40088ec1f6'
    end

    def build
      builder = Nokogiri::XML::Builder.new do |xml|
        xml.EntityDescriptor ID: reference_string,
          xmlns: Saml::XML::Namespaces::METADATA,
          "xmlns:saml" => Saml::XML::Namespaces::ASSERTION,
          # TODO(awong): Found a nokogiri bug. If we specify this
          # namespace, and then later use Saml::XML::Namespaces::SIGNATURE
          # as the xmlns: for the <Signature> node, on a add_next_sibling
          # reordering of the tree, the serialization in .to_xml drops the
          # xmlns: attribute in <Signature> changing the nature of the
          # document. Oops.
#            "xmlns:ds" => Saml::XML::Namespaces::SIGNATURE,
          entityID: entity_id do

            xml.IDPSSODescriptor protocolSupportEnumeration: protocol_enumeration do
              build_key_descriptor xml
              build_name_id_formats xml
              xml.SingleSignOnService Binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                Location: single_service_post_location
              build_attribute xml
            end

            xml.AttributeAuthorityDescriptor protocolSupportEnumeration: protocol_enumeration do
              build_key_descriptor xml
              build_organization xml
              build_contact xml
              xml.AttributeService Binding: "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                Location: attribute_service_location
              build_name_id_formats xml
              build_attribute xml
            end

            build_organization xml
            build_contact xml
          end
      end
      doc = builder.doc
      # Hack to add the METADATA_ID_DOCTYPE to the document. XMLSec is strict
      # with its validtion of the Reference URI and requires that the URI
      # be a valid intradoc id if using a #.
      doc = Nokogiri::XML(METADATA_ID_DOCTYPE + doc.root.to_xml)
      doc.sign! cert: @configurator.x509_certificate,
        key: @configurator.secret_key, uri: "##{reference_string}", signature_alg: 'rsa-sha256', digest_alg: 'sha256'

      # Per #2.3.2 the signature node, if present, must be the first element.
      signature = doc.xpath('//md:EntityDescriptor/ds:Signature',
                            'md' => Saml::XML::Namespaces::METADATA,
                            'ds' => Saml::XML::Namespaces::SIGNATURE)[0]
      namespaces = signature.namespaces
      doc.root.first_element_child.add_previous_sibling(signature)
      doc
    end

  private
    def build_key_descriptor(xml)
      xml.KeyDescriptor use: "signing" do
        xml.KeyInfo xmlns: Saml::XML::Namespaces::SIGNATURE do
          xml.X509Data do
            xml.X509Certificate x509_certificate
          end
        end
      end
    end

    def build_name_id_formats(xml)
      name_id_formats.each do |format|
        xml.NameIDFormat format
      end
    end

    def build_attribute(xml)
      attributes.each do |attribute|
        xml['saml'].Attribute(
          NameFormat: attribute.name_format,
          Name: attribute.name,
          FriendlyName: attribute.friendly_name) do
            attribute.values.each do |value|
              xml['saml'].AttributeValue value
            end
          end
      end
    end

    def build_organization(el)
      el.Organization do |organization|
        organization.OrganizationName organization_name, "xml:lang" => "en"
        organization.OrganizationDisplayName organization_name, "xml:lang" => "en"
        organization.OrganizationURL organization_url, "xml:lang" => "en"
      end
    end

    def build_contact(el)
      el.ContactPerson contactType: "technical" do |contact|
        %w[company given_name sur_name telephone mail_to_string].each do |section|
          section_value = technical_contact.public_send(section)
          contact.Company section_value if section_value.present?
        end
      end
    end

    def reference_string
      "_#{@reference_id}"
    end

    def entity_id
      @configurator.entity_id.presence || @configurator.base_saml_location
    end

    def protocol_enumeration
      Saml::XML::Namespaces::PROTOCOL
    end

    def attributes
      @attributes ||= @configurator.attributes.inject([]) do |list, (key, opts)|
        opts[:friendly_name] = key
        list << AttributeDecorator.new(opts)
        list
      end
    end

    def name_id_formats
      @name_id_formats ||= NameIdFormatter.new(@configurator.name_id.formats).all
    end

    def raw_algorithm
      @configurator.algorithm
    end

    def x509_certificate
      @configurator.x509_certificate
      .to_s
      .gsub(/-----BEGIN CERTIFICATE-----/,"")
      .gsub(/-----END CERTIFICATE-----/,"")
    end

    %w[
      support_email
      organization_name
      organization_url
      attribute_service_location
      single_service_post_location
      technical_contact
    ].each do |delegatable|
      define_method(delegatable) do
        @configurator.public_send delegatable
      end
      private delegatable

    end

    METADATA_ID_DOCTYPE = <<DOCTYPE
<!DOCTYPE EntityDescriptor [
  <!ELEMENT EntityDescriptor (#PCDATA)>
  <!ATTLIST EntityDescriptor ID ID #IMPLIED>
]>
DOCTYPE

  end
end
